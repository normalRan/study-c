

	

	AvlTree Insert(ElementType X, AvlTree T) {
		if (T == NULL) {	
			/* Create and return a one-node tree */
			T = malloc(sizeof(struct AvlTree));
			if (T == NULL)
				FatalError("Out of space !!!");
			else {
				T->Element = X;
				T->Height  = 0;
				T->Left = T->Right = NULL;
			}
		}	
		else if (X < T->Element) {
			T->Left = Insert(X, T->Left);	
			if (Height(T->Left) - Height(T->Right) == 2)
				if (X < T->Left->Element)
					T = SingleRotationWidthLeft(T);
				else
					T = DoubleRotationWidthLeft(T);
		}
		else if (X > T->Element) {
			T->Right = Insert(X, T->Right);	
			if (Height(T->Right) - Height(T->Left) == 2)
				if (X > T->Right->Element)
					T = SingleRotationWidthRight(T);
				else
					T = DoubleRotationWidthRight(T);
		}
		/* Else X is in the tree already; we do nothing */

		T->Height = Max(Height(T->Left), Height(T->Right)) + 1;
		return T;
	}


	/* This fuction can be called only if K2 has a left child  */	
	/* Perform a rotate between a node (K2) and its left child */
	/* Update heights, then return new root                    */
	
	static Position SingleRotationWidthLeft (Position K2) 
	{
		Position K1;	
		k1 = K2->left;
		K2->Left  = K1->Right;
		K1->Right = K2;

		K2->Height = Max(Height(K2->Left), Height(K2->Right)) + 1 ;
		K1->Height = Max(Height(K1->Left), K2->Height) + 1;

		return K1; /* New root */
	}
	
	/* This Function can be called only if K3 has a left */
	/* child and K3's left chilid has a right child      */
	/* Do the left-right double rotation                 */
	/* Update heights, then return new root              */

	static Position DoubleRotationWidthLeft(Position K3)
	{
		/* Rotation between K1 and K2 */	
		K3->left = SingleRotationWidthRight(K3->Left);

		/* Rotation between K3 and K2 */	
		return SingleRotationWidthLeft(K3);
	
	}


		
